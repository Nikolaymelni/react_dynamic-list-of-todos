{"version":3,"sources":["types/Filter.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterOption","TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","React","memo","onChangeOption","value","setValue","onChange","target","All","Active","Completed","placeholder","event","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","currentTodo","setCurrentTodo","useState","user","setUser","userId","useEffect","getUser","currentUser","href","email","name","App","setTodos","query","setQuery","filter","setFilter","result","todosFound","useMemo","filterBy","toLowerCase","includes","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e3a8429b.chunk.js","sourcesContent":["export enum FilterOption {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (todo: Todo) => void,\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => {\n        return (\n          <tr\n            data-cy=\"todo\"\n            className={classNames({\n              'has-background-info-light': selectedTodo?.id === todo.id,\n            })}\n            key={todo.id}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                todo.completed\n                  ? 'has-text-success'\n                  : 'has-text-danger',\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodo(todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'far',\n                    (selectedTodo?.id === todo.id\n                      ? 'fa-eye-slash'\n                      : 'fa-eye'\n                    ),\n                  )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { FilterOption } from '../../types/Filter';\n\ninterface Props {\n  onChangeOption: (event: FilterOption) => void;\n  value: string,\n  setValue: (query: string) => void,\n}\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  onChangeOption,\n  value,\n  setValue,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={({ target }) => {\n            switch (target.value) {\n              case 'all':\n                onChangeOption(FilterOption.All);\n                break;\n              case 'active':\n                onChangeOption(FilterOption.Active);\n                break;\n              case 'completed':\n                onChangeOption(FilterOption.Completed);\n                break;\n              default:\n            }\n          }}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"active\">Active</option>\n          <option value=\"completed\">Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={value}\n        onChange={(event) => setValue(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {value && (\n          <button\n            aria-label=\"delete\"\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => setValue('')}\n          />\n        )}\n      </span>\n\n    </p>\n  </form>\n));\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ninterface Props {\n  currentTodo: Todo,\n  setCurrentTodo: (todo: Todo | null) => void,\n}\n\nexport const TodoModal: React.FC<Props> = ({\n  currentTodo,\n  setCurrentTodo,\n}) => {\n  const [user, setUser] = useState<User | null>(null);\n  const {\n    id, title, completed, userId,\n  } = currentTodo;\n\n  useEffect(() => {\n    getUser(userId)\n      .then((currentUser) => setUser(currentUser));\n  });\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user || !currentTodo\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${id}`}\n              </div>\n\n              <button\n                aria-label=\"delete\"\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => setCurrentTodo(null)}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { FilterOption } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState<FilterOption>(FilterOption.All);\n  const [currentTodo, setCurrentTodo] = useState<Todo | null>(null);\n\n  useEffect(() => {\n    getTodos().then(result => setTodos(result));\n  }, []);\n\n  const todosFound = useMemo(() => {\n    return todos.filter(todo => {\n      const filterBy = todo.title.toLowerCase().includes(query.toLowerCase());\n\n      switch (filter) {\n        case 'active':\n          return !todo.completed && filterBy;\n        case 'completed':\n          return todo.completed && filterBy;\n        default:\n          return filterBy;\n      }\n    });\n  }, [todos, query, filter]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                value={query}\n                setValue={setQuery}\n                onChangeOption={setFilter}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!todos.length\n                ? <Loader />\n                : (\n                  <TodoList\n                    todos={todosFound}\n                    selectedTodo={currentTodo}\n                    setSelectedTodo={setCurrentTodo}\n                  />\n                )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          currentTodo={currentTodo}\n          setCurrentTodo={setCurrentTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}